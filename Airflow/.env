# Airflow User and Group IDs
AIRFLOW_UID=50000
AIRFLOW_GID=50000  # Optional, if you want to set the group ID

# Airflow Database Configuration
AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres/airflow
AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres/airflow

# Redis Configuration
AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0

# Executor Type
AIRFLOW__CORE__EXECUTOR=CeleryExecutor

# Security and Authentication
AIRFLOW__API__AUTH_BACKENDS=airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session

# Webserver Configuration
AIRFLOW__WEBSERVER__WEB_SERVER_PORT=8080
AIRFLOW__WEBSERVER__WEB_SERVER_HOST=0.0.0.0
AIRFLOW__WEBSERVER__EXPOSE_CONFIG=True  # Expose the Airflow configuration in the web UI

# DAG Configuration
AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION=true
AIRFLOW__CORE__LOAD_EXAMPLES=false  # Donâ€™t load example DAGs

# Scheduler Health Check Configuration
AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true  # Enable health checks for the scheduler

# Connection Test Configuration
AIRFLOW__CORE__TEST_CONNECTION=Enabled  # Enable connection testing

# Default User Configuration (Optional)
_AIRFLOW_WWW_USER_CREATE=true
_AIRFLOW_WWW_USER_USERNAME=airflow  # Default username
_AIRFLOW_WWW_USER_PASSWORD=airflow  # Default password

# Additional Python Dependencies
_PIP_ADDITIONAL_REQUIREMENTS=pytz pyOpenSSL ndg-httpsclient pyasn1 python-dotenv requests deltalake redis apache-airflow[crypto,celery,postgres,hive,jdbc,mysql,papermill,snowflake,ssh]==2.10.0 numpy pandas matplotlib seaborn psycopg2-binary snowflake-connector-python snowflake-sqlalchemy apache-airflow-providers-snowflake