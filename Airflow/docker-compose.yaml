version: '3.8'

# Common configurations for all Airflow services (webserver, scheduler, worker, triggerer, etc.)
x-airflow-common:
  &airflow-common
  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:2.10.0}
  environment:
    &airflow-common-env
    AIRFLOW_UID: ${AIRFLOW_UID}
    AIRFLOW_GID: ${AIRFLOW_GID}  # Optional Group ID for file permissions
    AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}  # Defines the executor type (CeleryExecutor in this case)
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}  # Connection string for the PostgreSQL database
    AIRFLOW__CELERY__RESULT_BACKEND: ${AIRFLOW__CELERY__RESULT_BACKEND}  # Backend URL for Celery to store task results
    AIRFLOW__CELERY__BROKER_URL: ${AIRFLOW__CELERY__BROKER_URL}  # Redis broker URL for Celery task queuing
    AIRFLOW__CORE__FERNET_KEY: ''  # Fernet key for encrypting sensitive data
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}  # Whether new DAGs are paused by default
    AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}  # Whether to load example DAGs
    AIRFLOW__API__AUTH_BACKENDS: ${AIRFLOW__API__AUTH_BACKENDS}  # Authentication backends for the Airflow API
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: ${AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK}  # Enables health checks for the scheduler
    AIRFLOW__CORE__TEST_CONNECTION: ${AIRFLOW__CORE__TEST_CONNECTION:-Enabled}
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: ${AIRFLOW__WEBSERVER__EXPOSE_CONFIG:-True}
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: 10  # Scan DAGs directory every 60 seconds
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}  # Additional Python dependencies
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags  # Mount the DAGs directory
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs  # Mount the logs directory
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config  # Mount the config directory
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins  # Mount the plugins directory
  user: "${AIRFLOW_UID}:0"  # Run as the specified user
  depends_on:  # Dependencies for services
    &airflow-common-depends-on
    redis:
      condition: service_healthy  # Wait for Redis to be healthy
    postgres:
      condition: service_healthy  # Wait for PostgreSQL to be healthy

services:
  # PostgreSQL database service for Airflow metadata
  postgres:
    image: postgres:13  # Use PostgreSQL version 13
    environment:
      POSTGRES_USER: airflow  # PostgreSQL user
      POSTGRES_PASSWORD: airflow  # PostgreSQL password
      POSTGRES_DB: airflow  # PostgreSQL database name
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data  # Persistent storage for the database
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]  # Health check to ensure PostgreSQL is ready
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always  # Always restart the service if it fails

  # Redis service for Celery task queuing
  redis:
    image: redis:7.2-bookworm  # Use Redis version 7.2 (Bookworm)
    expose:
      - 6379  # Expose Redis on port 6379
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]  # Health check to ensure Redis is ready
      interval: 10s
      timeout: 30s
      retries: 50
      start_period: 30s
    restart: always  # Always restart the service if it fails

  # Airflow webserver service for accessing the Airflow UI
  airflow-webserver:
    <<: *airflow-common  # Inherit common Airflow configurations
    command: webserver  # Run the Airflow webserver
    ports:
      - "8080:8080"  # Expose the webserver on port 8080
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]  # Health check for the webserver
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always  # Always restart the service if it fails
    depends_on:
      <<: *airflow-common-depends-on  # Ensure dependencies are healthy
      airflow-init:
        condition: service_completed_successfully  # Wait for initialization to complete

  # Airflow scheduler service for managing DAG execution
  airflow-scheduler:
    <<: *airflow-common  # Inherit common Airflow configurations
    command: scheduler  # Run the Airflow scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]  # Health check for the scheduler
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always  # Always restart the service if it fails
    depends_on:
      <<: *airflow-common-depends-on  # Ensure dependencies are healthy
      airflow-init:
        condition: service_completed_successfully  # Wait for initialization to complete

  # Airflow worker service for executing tasks
  airflow-worker:
    <<: *airflow-common  # Inherit common Airflow configurations
    command: celery worker  # Run the Celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'  # Health check for the worker
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      <<: *airflow-common-env  # Inherit common environment variables
      DUMB_INIT_SETSID: "0"  # Environment variable to control process initialization
    restart: always  # Always restart the service if it fails
    depends_on:
      <<: *airflow-common-depends-on  # Ensure dependencies are healthy
      airflow-init:
        condition: service_completed_successfully  # Wait for initialization to complete

  # Airflow triggerer service for handling deferred tasks
  airflow-triggerer:
    <<: *airflow-common  # Inherit common Airflow configurations
    command: triggerer  # Run the Airflow triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']  # Health check for the triggerer
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always  # Always restart the service if it fails
    depends_on:
      <<: *airflow-common-depends-on  # Ensure dependencies are healthy
      airflow-init:
        condition: service_completed_successfully  # Wait for initialization to complete

  # Airflow initialization service for database migrations and setup
  airflow-init:
    <<: *airflow-common  # Inherit common Airflow configurations
    entrypoint: /bin/bash  # Override the entrypoint to run initialization scripts
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version  # Run Airflow version to initialize
    environment:
      <<: *airflow-common-env  # Inherit common environment variables
      _AIRFLOW_DB_MIGRATE: 'true'  # Run database migrations
      _AIRFLOW_WWW_USER_CREATE: 'true'  # Create the default Airflow user
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}  # Username for the default Airflow user
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}  # Password for the default Airflow user
      _PIP_ADDITIONAL_REQUIREMENTS: ''  # No additional dependencies for initialization
    user: "0:0"  # Run as root to perform setup
    volumes:
      - ${AIRFLOW_PROJ_DIR:-.}:/sources  # Mount the project directory

  # Flower service for monitoring Celery tasks
  flower:
    <<: *airflow-common  # Inherit common Airflow configurations
    command: celery flower  # Run the Flower monitoring tool
    ports:
      - "5555:5555"  # Expose Flower on port 5555
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:5555/"]  # Health check for Flower
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always  # Always restart the service if it fails
    depends_on:
      <<: *airflow-common-depends-on  # Ensure dependencies are healthy
      airflow-init:
        condition: service_completed_successfully  # Wait for initialization to complete

# Persistent volume for PostgreSQL data
volumes:
  postgres-db-volume: